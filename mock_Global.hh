/*******************************************************************************
Copyright (C) 2017 Mario Garza-Fabre, Julia Handl, Joshua Knowles

This file is part of Delta-MOCK.

Delta-MOCK is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Delta-MOCK is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Delta-MOCK. If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------

Author: Mario Garza-Fabre (garzafabre@gmail.com)
Last updated: 10 July 2017

*******************************************************************************/

#ifndef __MOCK_GLOBAL_HH__
#define __MOCK_GLOBAL_HH__

/******************
C/C++ libraries
******************/
#include <math.h>
#include <iostream>
#include <algorithm> 
#include <vector>
#include <fstream>
#include <random>

/******************
Global constants 
******************/
#define PI 3.14159265358979
#define EPS 1.0e-14
#define INF 1.0e14

/******************
Global settings
******************/
#define DISPLAY_PROGRESS_MESSAGES	// Comment this line out to avoid displaying messages during execution
using namespace std;

// Distance measures
#define EUCLIDEAN 0
#define COSINE 1
#define CORRELATION 2
#define GAUSSIAN 3
#define JACCARD 4

#define DISTANCE_MEASURE EUCLIDEAN // Distance measure to use

/******************
Defined types
******************/
typedef int * VectorIntPtr;
typedef VectorIntPtr * MatrixIntPtr;

typedef float * VectorFloatPtr;
typedef VectorFloatPtr * MatrixFloatPtr;

typedef double * VectorDoublePtr;
typedef VectorDoublePtr * MatrixDoublePtr;

/******************
Project libraries 
******************/
#include "mock_Util.hh"
#include "mock_ClusteringProblem.hh"
#include "mock_Algorithm.fwd.hh"

/******************
Global variables 
******************/
extern vector< vector< string > > input_parameters;	// List of command-line parameters (mock.hh)
extern ClusteringProblemPtr PROBLEM;				// Pointer to PROBLEM object (mock.hh)
extern AlgorithmPtr ALGO;							// Pointer to ALGORITHM object (mock.hh)
extern default_random_engine *rnd;					// Random numbers generator (mock.hh)

// Mock-specific parameters
extern int mock_L;							// Number of nearest neighbours to use in mutation and connectivity computation
extern int mock_Kmax;						// Upper bound on the number of clusters k generated by k-means during initialisation
extern const int num_objectives;			// Number of optimisation objectives to use	
extern int TOTAL_INITIAL_SOLUTIONS;			// Size of the initial set of solutions
/******************/

#endif
