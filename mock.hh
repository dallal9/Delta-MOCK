/*******************************************************************************
Copyright (C) 2017 Mario Garza-Fabre, Julia Handl, Joshua Knowles

This file is part of Delta-MOCK.

Delta-MOCK is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Delta-MOCK is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Delta-MOCK. If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------

Author: Mario Garza-Fabre (garzafabre@gmail.com)
Last updated: 10 July 2017

*******************************************************************************/

#ifndef __MOCK_HH__
#define __MOCK_HH__

/******************
Dependencies
******************/
#include "mock_Global.hh"
#include "mock_Nsga2.hh"

/******************
Prototypes
******************/

void initialise( int argc, char *argv[] );
void parse_input_parameters( int argc, char *argv[] );
void show_usage( string program_name );
void clean_memory();

/******************
Global variables
******************/
vector< vector< string > > input_parameters(0);	// List of command-line parameters
ClusteringProblemPtr PROBLEM;					// Pointer to PROBLEM object
AlgorithmPtr ALGO;								// Pointer to ALGORITHM object
string algorithm_name;							// Optimization algorithm identifier

default_random_engine *rnd;						// Random numbers generator
unsigned long int seed = 0;						// Seed for the random numbers generator

// Mock-specific parameters
int mock_L = 10;							// Number of nearest neighbours to use in mutation and connectivity computation
int mock_Kmax = -1;							// Upper bound on the number of clusters k generated by k-means during initialisation
const int num_objectives = 2;				// Number of optimisation objectives to use	
int TOTAL_INITIAL_SOLUTIONS = -1;			// Size of the initial set of solutions

#endif
